import { IAttributes as ICancelReservationActionAttributes } from '../action/cancel/reservation';
import * as AssetTransactionFactory from '../assetTransaction';
import { ITransaction as IReserveTransaction } from '../assetTransaction/reserve';
import { AssetTransactionType } from '../assetTransactionType';
import { IExtendId } from '../autoGenerated';
import { IReservation as IBusReservation, IReservationFor as IBusReservationFor } from '../reservation/busReservation';
import { IReservation as IEventReservation, IReservationFor as IEventReservationFor } from '../reservation/event';
import { IReservation as IReservationPackage } from '../reservation/reservationPackage';

export import IAgent = AssetTransactionFactory.IAgent;
export type IStartParamsWithoutDetail =
    AssetTransactionFactory.IStartParams<AssetTransactionType.CancelReservation, IAgent, undefined, IObjectWithoutDetail>;
/**
 * 取引開始パラメータ
 */
export type IStartParams = AssetTransactionFactory.IStartParams<AssetTransactionType.CancelReservation, IAgent, undefined, IObject>;
// tslint:disable-next-line:no-empty-interface
export interface IResult {
}
/**
 * エラー
 */
export type IError = any;
export interface IObjectWithoutDetail {
    reservation?: {
        /**
         * 予約IDで取消
         */
        id?: string;
        /**
         * 予約番号で取消
         */
        reservationNumber?: string;
    };
}
export type IReserveTransactionAsObject = Pick<IReserveTransaction, 'typeOf' | 'id' | 'transactionNumber'> & {
    object: {
        reservationFor: Pick<IEventReservationFor | IBusReservationFor, 'id' | 'typeOf'>;
    };
};
export type IBusReservationAsObject = Pick<
    IBusReservation,
    'id' | 'issuedThrough' | 'reservationNumber' | 'typeOf'
> & {
    reservationFor: Pick<IBusReservationFor, 'id' | 'typeOf'>;
};
export type IEventReservationAsObject = Pick<
    IEventReservation,
    'id' | 'issuedThrough' | 'reservationNumber' | 'typeOf'
> & {
    reservationFor: Pick<IEventReservationFor, 'id' | 'typeOf'>;
};
/**
 * 取引対象物
 */
export interface IObject extends Pick<IReservationPackage, 'reservationNumber' | 'typeOf'> { // IReservationPackageとして再定義(2024-04-18~)
    transaction?: IReserveTransactionAsObject;
    reservations?: IBusReservationAsObject[] | IEventReservationAsObject[];
    /**
     * 予約番号
     */
    reservationNumber: string; // IReservationPackageとして再定義(2024-04-18~)
}
/**
 * 取引確定パラメータ
 */
export interface IConfirmParams {
    id: string;
}
export interface IPotentialCancelAction extends ICancelReservationActionAttributes {
    purpose: { id: string; typeOf: AssetTransactionType.CancelReservation };
}
export interface IPotentialActions {
    cancelReservation: IPotentialCancelAction[];
}
export type ITransaction = IExtendId<IAttributes>;
/**
 * 取引属性
 */
export interface IAttributes
    extends AssetTransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}
export interface IObjectSearchConditions {
    reservationNumber?: {
        $eq?: string;
        $in?: string[];
    };
}
export interface ISearchConditions extends AssetTransactionFactory.ISearchConditions<AssetTransactionType.CancelReservation> {
    object?: IObjectSearchConditions; // 拡張(2024-04-18~)
}
