import type { factory as GMOFactory } from '@motionpicture/gmo-service';

import {
    IAction as IPayAction,
    IAttributes as IPayActionAttributes,
    ILocation,
    IMovieTicket,
    IOrderAsPayPurpose,
    IPendingTransaction,
    IPurpose as IPayPurpose,
    IRecipient as IPayRecipient
} from '../action/trade/pay';
import * as AssetTransactionFactory from '../assetTransaction';
import { AssetTransactionType } from '../assetTransactionType';
import { IExtendId } from '../autoGenerated';
import { IMonetaryAmount } from '../monetaryAmount';
import { ITotalPaymentDue } from '../order';
import { ICreditCard3DS, IUnauthorizedCardOfMember, IUncheckedCardRaw, IUncheckedCardTokenized } from '../paymentMethod/paymentCard/creditCard';
import { IOnPaymentStatusChanged } from '../project';
import { IPropertyValue } from '../propertyValue';
import { PaymentServiceType } from '../service/paymentService';

// 最適化(2022-05-27~)
export import IAgent = AssetTransactionFactory.IAgent;
export type IRecipient = IPayRecipient;
/**
 * ペイメントカードトークン
 */
export type ITokenizedPaymentCard = string;
export type IFromLocation = ITokenizedPaymentCard;
/**
 * クレジットカード決済承認に必要なクレジットカードインターフェース
 */
type ICreditCard = (IUncheckedCardRaw | IUncheckedCardTokenized | IUnauthorizedCardOfMember) & ICreditCard3DS;
export {
    ICreditCard,
    ICreditCard3DS,
    IUnauthorizedCardOfMember,
    IUncheckedCardRaw,
    IUncheckedCardTokenized
};
export type IEntryTranArgs = GMOFactory.credit.IEntryTranArgs;
export type IEntryTranResult = GMOFactory.credit.IEntryTranResult;
export type IExecTranArgs = GMOFactory.credit.IExecTranArgs;
export type IExecTranResult = GMOFactory.credit.IExecTranResult;
export type IExecTran3dsArgs = GMOFactory.credit.IExecTran3dsArgs;
export type IExecTran3dsResult = GMOFactory.credit.IExecTran3dsResult;
export type ISecureTran2Result = GMOFactory.credit.ISecureTran2Result;
export interface IPaymentMethodAmount extends Pick<IMonetaryAmount, 'currency' | 'typeOf' | 'value'> {
    value: number;
}
export interface IPaymentMethod {
    /**
     * The identifier for the account the payment will be applied to.
     */
    accountId?: string;
    /**
     * 追加特性
     */
    additionalProperty?: IPropertyValue<string>[];
    /**
     * The amount of money.
     * MonetaryAmount対応(2023-08-12~)
     */
    amount: number | IPaymentMethodAmount;
    /**
     * 説明
     */
    description?: string;
    /**
     * 決済方法名称
     * 未指定であればデフォルト値が使用されます
     */
    name?: string;
    // object.paymentMethodIdと重複していることを確認済(12months)
    // object.paymentMethodIdへ完全移行(2023-08-30~)
    // paymentMethodId?: string;
    /**
     * The total amount due.
     */
    totalPaymentDue?: ITotalPaymentDue;
    // データの互換性維持対応は済(2023-08-29)
    // identifierへ完全移行(2023-08-30~)
    // typeOf: string;
    /**
     * 決済方法区分
     */
    identifier: string;
    /**
     * 出金元ペイメントカード
     */
    fromLocation?: IFromLocation;
    /**
     * 決済カードリスト
     */
    movieTickets?: IMovieTicket[];
    /**
     * 支払い方法
     */
    method?: string;
    /**
     * クレジットカード情報
     */
    creditCard?: ICreditCard;
}
export interface IAccountsReceivableByServiceType {
    serviceType: string;
    accountsReceivable?: number;
}
/**
 * 取引対象物
 */
export interface IObject {
    // object: Invoice化に向けて追加(2022-05-31~)
    accountId: string;
    // object: Invoice化に向けて追加(2022-05-31~)
    paymentMethodId: string;
    typeOf: PaymentServiceType;
    /**
     * 発行決済サービスID
     */
    id: string;
    // CreditCardIFのカード通貨区分を追加(2023-08-07~)
    // serviceOutput?: IOrderPaymentMethodIssuedThroughServiceOutput;
    paymentMethod: IPaymentMethod;
    pendingTransaction?: IPendingTransaction;
    entryTranArgs?: IEntryTranArgs;
    entryTranResult?: IEntryTranResult;
    execTranArgs?: IExecTranArgs | IExecTran3dsArgs; // 3DS拡張(2024-01-02~)
    execTranResult?: IExecTranResult | IExecTran3dsResult; // 3DS拡張(2024-01-02~)
    secureTran2Result?: ISecureTran2Result; // 3DS拡張(2024-01-02~)
    payAction?: IPayAction;
    onPaymentStatusChanged?: IOnPaymentStatusChanged;
    accountsReceivablesByServiceType?: IAccountsReceivableByServiceType[];
}
export interface IPaymentMethodWithoutDetail extends IPaymentMethod {
    /**
     * 取引開始前の指定ではnumberに限定
     */
    amount: number;
}
export interface IObjectWithoutDetail extends Pick<IObject, 'typeOf' | 'id' | 'paymentMethod'> {
    paymentMethod: IPaymentMethodWithoutDetail;
}
export type IStartParamsWithoutDetail =
    AssetTransactionFactory.IStartParams<AssetTransactionType.Pay, IAgent, IRecipient, IObjectWithoutDetail> & {
        // add location(2022-11-11~)
        location?: ILocation;
        recipient: IRecipient;
        purpose?: IPayPurpose;
    };
export interface IStartParams extends AssetTransactionFactory.IStartParams<AssetTransactionType.Pay, IAgent, IRecipient, IObject> {
    // add location(2022-11-11~)
    location?: ILocation;
    recipient: IRecipient;
}
export interface IPotentialActions {
    /**
     * 決済アクション
     */
    pay: IPayActionAttributes[];
}
export interface IPotentialActionsParams {
    pay: {
        purpose: IOrderAsPayPurpose;
    };
}
/**
 * 確定パラメータ
 */
export interface IConfirmParams {
    id?: string;
    // 確定時の決済方法区分指定(2023-08-29~)
    object?: {
        paymentMethod?: { identifier?: string };
    };
    transactionNumber?: string;
    endDate?: Date;
    potentialActions: IPotentialActionsParams;
}
export type IResult = any;
export type IError = any;
export interface IAttributes extends AssetTransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}
export type ITransaction = IExtendId<IAttributes>;
export interface ISearchConditions extends AssetTransactionFactory.ISearchConditions<AssetTransactionType.Pay> {
    object?: {
        accountId?: {
            $eq?: string;
        };
    };
}
