import { ActionType } from './actionType';
import { ICategoryCode } from './categoryCode';
import { IMonetaryAmount } from './monetaryAmount';
import { IAddOn as IBaseAddOn, IName as IOfferName, IOffer as IBaseOffer } from './offer';
import { OfferType } from './offerType';
import { IPermit } from './permit';
import { IPriceSpecification as ICategoryCodeChargeSpecification } from './priceSpecification/categoryCodeChargeSpecification';
import { IPriceSpecification as ICompoundPriceSpecification } from './priceSpecification/compoundPriceSpecification';
import { IPriceSpecification as IMovieTicketTypeChargeSpecification } from './priceSpecification/movieTicketTypeChargeSpecification';
import { IPriceSpecification as IUnitPriceSpecification } from './priceSpecification/unitPriceSpecification';
import { IProject } from './project';
import { IPropertyValue } from './propertyValue';
import { IQuantitativeValue } from './quantitativeValue';
import { SortType } from './sortType';
import { IThing } from './thing';
import { UnitCode } from './unitCode';
import * as UnitPriceOfferFactory from './unitPriceOffer';

/**
 * プロダクトタイプ
 */
export enum ProductType {
    /**
     * 興行
     */
    EventService = 'EventService',
    /**
     * メンバーシップサービス
     */
    MembershipService = 'MembershipService',
    /**
     * ペイメントカード
     */
    PaymentCard = 'PaymentCard',
    /**
     * アドオン
     */
    Product = 'Product',
    /**
     * 旅客サービス
     */
    Transportation = 'Transportation'
}

export interface IHasOfferCatalog {
    typeOf: 'OfferCatalog';
    id: string;
}
export type IMembershipPointsEarned = Pick<IQuantitativeValue<string>, 'name' | 'typeOf' | 'unitText' | 'value'>;
export type IServiceOutput = Pick<IPermit, 'typeOf' | 'amount'> & {
    membershipPointsEarned?: IMembershipPointsEarned;
    automaticRenewal?: boolean;
};
export type IPointAwardAmount = Pick<IMonetaryAmount, 'typeOf' | 'currency' | 'value'>;
/**
 * ポイント特典
 */
export interface IPointAward {
    typeOf: ActionType.MoneyTransfer;
    amount?: IPointAwardAmount;
    /**
     * 特典付与先
     */
    toLocation?: {
        /**
         * Permit
         */
        typeOf?: string;
        /**
         * カード番号
         */
        identifier: string;
        issuedThrough: {
            /**
             * カード発行サービスID
             */
            id: string;
        };
    };
    description?: string;
    recipient?: any;
    purpose?: { identifier?: string };
}

/**
 * 外部サービス認証情報
 */
export interface ICredentials {
    siteId?: string;
    sitePass?: string;
    authorizeServerDomain?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface IAvailableChannel {
    typeOf: 'ServiceChannel';
    serviceUrl?: string;
    credentials?: ICredentials;
}
export type IServiceType = Pick<ICategoryCode, 'codeValue' | 'inCodeSet' | 'project' | 'typeOf'>;
export type IOffer = Pick<
    IBaseOffer,
    'project' | 'typeOf' | 'priceCurrency' | 'availabilityEnds' | 'availabilityStarts' | 'validFrom' | 'validThrough'
> & {
    seller?: { id?: string };
};
/**
 * プロダクト
 * {@link https://schema.org/Product}
 */
export interface IProduct extends Pick<IThing, 'name' | 'description'> {
    project: Pick<IProject, 'id' | 'typeOf'>;
    typeOf: ProductType;
    id?: string;
    availableChannel?: IAvailableChannel;
    /**
     * Indicates an OfferCatalog listing for this Organization, Person, or Service.
     */
    hasOfferCatalog?: IHasOfferCatalog;
    /**
     * An offer to provide this item
     */
    offers?: IOffer[];
    pointAward?: IPointAward;
    /**
     * The product identifier, such as ISBN. For example: meta itemprop="productID" content="isbn:123-456-789".
     */
    productID: string;
    /**
     * The tangible thing generated by the service, e.g. a passport, permit, etc.
     */
    serviceOutput?: IServiceOutput;
    /**
     * The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
     */
    serviceType?: IServiceType;
    additionalProperty?: IPropertyValue<string>[];
}

export interface ISortOrder {
    productID?: SortType;
}

export interface ISearchConditions {
    limit?: number;
    page?: number;
    sort?: ISortOrder;
    project?: { id?: { $eq?: string } };
    hasOfferCatalog?: {
        id?: {
            $eq?: string;
        };
    };
    id?: {
        $eq?: string;
        $in?: string[];
    };
    name?: {
        $regex?: string;
    };
    productID?: {
        $eq?: string;
        $in?: string[];
        $regex?: string;
    };
    typeOf?: {
        $eq?: string;
        $in?: string[];
    };
    offers?: {
        $elemMatch?: {
            availabilityEnds?: {
                $gte?: Date;
                $lte?: Date;
            };
            availabilityStarts?: {
                $gte?: Date;
                $lte?: Date;
            };
            validFrom?: {
                $gte?: Date;
                $lte?: Date;
            };
            validThrough?: {
                $gte?: Date;
                $lte?: Date;
            };
            'seller.id'?: {
                $in?: string[];
            };
        };
    };
    serviceOutput?: {
        typeOf?: { $eq?: string };
        amount?: {
            currency?: { $eq?: string };
        };
    };
    serviceType?: {
        codeValue?: { $eq?: string };
    };
}

/**
 * サービスアウトプット検索条件
 */
export interface IServiceOutputSearchConditions {
    limit?: number;
    page?: number;
    sort?: ISortOrder;
    project?: { id?: { $eq?: string } };
    accessCode?: { $eq?: string };
    id?: { $eq?: string };
    identifier?: {
        $eq?: string;
        $in?: string[];
    };
    issuedBy?: {
        id?: { $eq?: string };
    };
    issuedThrough?: {
        id?: { $eq?: string };
        serviceType?: {
            codeValue?: { $eq?: string };
        };
        typeOf?: { $eq?: ProductType };
    };
    typeOf?: { $eq?: string };
}

export type ICategoryCodeChargePriceComponent = Omit<ICategoryCodeChargeSpecification, 'project'>;
export type IMovieTicketTypeChargePriceComponent = Omit<IMovieTicketTypeChargeSpecification, 'project'>;
export type ITicketUnitPriceComponent = Omit<IUnitPriceSpecification, 'project'>;
export type ITicketPriceComponent = ICategoryCodeChargePriceComponent | IMovieTicketTypeChargePriceComponent | ITicketUnitPriceComponent;
export type IEligibleQuantity = Pick<IQuantitativeValue<UnitCode.C62>, 'maxValue' | 'typeOf' | 'unitCode' | 'value'>;
/**
 * プロダクトオファーの価格仕様
 */
export type ITicketPriceSpecification = Omit<ICompoundPriceSpecification<ITicketPriceComponent>, 'project'>;
export type ITicketAddOn =
    Pick<IBaseAddOn, 'id' | 'identifier' | 'itemOffered' | 'priceCurrency' | 'typeOf' | 'validFrom' | 'validThrough'> & {
        priceSpecification: ITicketUnitPriceComponent;
    };
export type IAddOnItemOffered = Pick<IProduct, 'typeOf' | 'id' | 'name'>;
export type IMinimizedTicketAddOn = Pick<IBaseAddOn, 'typeOf' | 'priceCurrency'> & {
    itemOffered: IAddOnItemOffered;
};
/**
 * プロダクトオファー
 * strict definition(2023-02-24~)
 */
// export interface ITicketOffer extends Omit<IBaseOffer, 'priceSpecification' | 'project'> {
export interface ITicketOffer extends Pick<
    IBaseOffer,
    'name' | 'description' | 'alternateName' | 'color' | 'typeOf' | 'id' |
    // 'addOn' |
    'availability' |
    'availableAtOrFrom' |
    'category' |
    'eligibleMembershipType' | 'eligibleSeatingType' | 'eligibleMonetaryAmount' | 'eligibleSubReservation' |
    'eligibleQuantity' |
    'offeredThrough' |
    'priceCurrency' |
    'validFrom' | 'validThrough' |
    'validRateLimit' |
    'additionalProperty'
> {
    addOn?: ITicketAddOn[] | IMinimizedTicketAddOn[];
    identifier: string;
    name: IOfferName;
    priceSpecification: ITicketPriceSpecification;
    itemOffered?: UnitPriceOfferFactory.IItemOffered;
    sortIndex?: number;
    typeOf: OfferType.Offer;
}
