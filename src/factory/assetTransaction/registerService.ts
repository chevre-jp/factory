import { IAttributes as IRegisterServiceActionAttributes } from '../action/interact/register/service';
import { IAttributes as IMoneyTransferActionAttributes } from '../action/transfer/moneyTransfer';
import * as TransactionFactory from '../assetTransaction';
import { AssetTransactionType } from '../assetTransactionType';
import { IExtendId } from '../autoGenerated';
import { OfferType } from '../offerType';
import { IProduct, IServiceOutput } from '../product';
// import { IInformParams } from '../project';

export type IStartParamsWithoutDetail =
    TransactionFactory.IStartParams<AssetTransactionType.RegisterService, IAgent, undefined, IObjectWithoutDetail>;

/**
 * 取引開始パラメーターインターフェース
 * サービス: MembershipService,PaymentCardであればserviceOutputを発行する
 */
export type IStartParams = TransactionFactory.IStartParams<AssetTransactionType.RegisterService, IAgent, undefined, IObject>;

export interface IAgent {
    typeOf: string;
    id?: string;
    name: string;
    url?: string;
}

// export interface IPotentialActionsParams {
//     registerService?: {
//         potentialActions?: {
//             informServiceOutput?: IInformParams[];
//         };
//     };
// }

/**
 * 確定パラメーターインターフェース
 */
export interface IConfirmParams {
    id?: string;
    transactionNumber?: string;
    /**
     * 取引確定日時を指定する
     * serviceOutputのvalidFromに適用される
     */
    endDate?: Date;
    // 不要なので廃止(2022-05-16~)
    // object?: any;
    // 不要なので廃止(2022-05-16~)
    // potentialActions?: IPotentialActionsParams;
}

// tslint:disable-next-line:no-empty-interface
export interface IResult {
}

/**
 * エラーインターフェース
 */
export type IError = any;

export interface IAcceptedPointAward {
    purpose?: { identifier?: string };
    recipient?: any;
    /**
     * 特典付与先
     */
    toLocation?: {
        /**
         * カード番号
         */
        identifier: string;
        issuedThrough: {
            /**
             * カード発行サービスID
             */
            id: string;
        };
    };
}

export interface IAcceptedItemOffered {
    id?: string;
    pointAward?: IAcceptedPointAward;
    serviceOutput?: IServiceOutput;
}

export interface IAcceptedOfferWithoutDetail {
    typeOf: OfferType.Offer;
    id: string;
    itemOffered: IAcceptedItemOffered;
}

export interface IItemOffered extends IProduct {
    serviceOutput: IServiceOutput;
}

export interface IAcceptedOffer {
    typeOf: OfferType.Offer;
    id: string;
    itemOffered: IItemOffered;
}

export type IObjectWithoutDetail = IAcceptedOfferWithoutDetail[];

export type IObject = IAcceptedOffer[];

export interface IPotentialActions {
    moneyTransfer: IMoneyTransferActionAttributes[];
    registerService: IRegisterServiceActionAttributes[];
}

export interface IAttributes extends TransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}

/**
 * 取引インターフェース
 */
export type ITransaction = IExtendId<IAttributes>;

export interface ISearchConditions extends TransactionFactory.ISearchConditions<AssetTransactionType.RegisterService> {
    object?: any;
}
