import * as ReserveActionFactory from '../action/reserve';
import ActionType from '../actionType';
import * as TransactionFactory from '../assetTransaction';
import AssetTransactionType from '../assetTransactionType';
import { IExtendId } from '../autoGenerated';
import { ITicketOffer } from '../event/screeningEvent';
import { IMovieTicket } from '../paymentMethod/paymentCard/movieTicket';
import { IPointAward } from '../product';
import { IInformParams, IOnReservationStatusChanged } from '../project';
import { IPropertyValue } from '../propertyValue';
import * as ReservationFactory from '../reservation';
import {
    IReservation as IEventReservation,
    IReservationFor as IEventReservationReservationFor,
    ISubReservation as ISubReservation4eventReservation
} from '../reservation/event';
import { IReservation as IReservationPackage } from '../reservation/reservationPackage';
import ReservationType from '../reservationType';

export type IStartParamsWithoutDetail =
    TransactionFactory.IStartParams<AssetTransactionType.Reserve, IAgent, undefined, IObjectWithoutDetail>;

/**
 * 取引開始パラメーターインターフェース
 */
export type IStartParams = TransactionFactory.IStartParams<AssetTransactionType.Reserve, IAgent, undefined, IObject>;

export interface IAgent {
    typeOf: string;
    id?: string;
    name: string;
    url?: string;
}

export interface IAcceptedProgramMembershipUsedAsObject {
    accessCode?: string;
    /**
     * メンバーシップコード
     */
    identifier: string;
    issuedThrough: {
        /**
         * メンバーシップ発行サービスID
         */
        id: string;
    };
}
/**
 * トークン化された適用メンバーシップ
 */
export type ITokenizedAcceptedProgramMembershipUsed = string;
/**
 * 適用メンバーシップ
 */
export type IAcceptedProgramMembershipUsed = IAcceptedProgramMembershipUsedAsObject | ITokenizedAcceptedProgramMembershipUsed;

export type IAcceptedSubReservation = ISubReservation4eventReservation;

export interface IAcceptedPointAward {
    typeOf: ActionType.MoneyTransfer;
    recipient?: any;
    /**
     * 特典付与先
     */
    toLocation?: {
        /**
         * カード番号
         */
        identifier: string;
        issuedThrough: {
            /**
             * カード発行サービスID
             */
            id: string;
        };
    };
}

/**
 * 受け入れられたオファーのアイテムインターフェース
 */
export interface IAcceptedTicketOfferItemOffered {
    pointAward?: IAcceptedPointAward;
    serviceOutput?: {
        typeOf: ReservationType.EventReservation;
        /**
         * 追加特性
         */
        additionalProperty?: IPropertyValue<string>[];
        /**
         * 予約追加テキスト
         */
        additionalTicketText?: string;
        // 適用メンバーシップ
        programMembershipUsed?: IAcceptedProgramMembershipUsed;
        reservedTicket?: {
            issuedBy?: ReservationFactory.IUnderName;
            typeOf: ReservationFactory.TicketType;
            /**
             * 予約座席指定
             * 指定席イベントの場合、座席を指定
             * 自由席イベントの場合、あるいは、最大収容人数がないイベントの場合は、座席指定不要
             */
            ticketedSeat?: ReservationFactory.ISeat;
        };
        subReservation?: IAcceptedSubReservation[];
    };
}

export interface IAcceptedTicketOfferItemOffered4object {
    pointAward?: IPointAward;
    serviceOutput: {
        id: string;
    };
}

export interface IAcceptedAddOn {
    /**
     * アドオンID
     */
    id?: string;
}

export type IAcceptedPaymentMethod = IMovieTicket;

/**
 * 受け入れられたチケットオファー(詳細なし)
 */
export interface IAcceptedTicketOfferWithoutDetail {
    /**
     * オファーID
     */
    id: string;
    /**
     * アイテム情報
     * 予約の詳細指定など
     */
    itemOffered?: IAcceptedTicketOfferItemOffered;
    /**
     * 受け入れるアドオン
     */
    addOn?: IAcceptedAddOn[];
    paymentMethod?: IAcceptedPaymentMethod;
    additionalProperty?: IPropertyValue<string>[];
}

/**
 * 受け入れられたチケットオファー
 */
export type IAcceptedTicketOffer = IAcceptedTicketOfferWithoutDetail & ITicketOffer & {
    itemOffered?: IAcceptedTicketOfferItemOffered;
};

export interface IAcceptedOffer4object {
    id: string;
    itemOffered: IAcceptedTicketOfferItemOffered4object;
}

/**
 * 確定時予約インターフェース
 * 指定することで、予約属性を確定時に上書きすることができる
 */
export interface IConfirmingReservation {
    id: string;
    /**
     * Any additional text to appear on a ticket, such as additional privileges or identifiers.
     */
    additionalTicketText?: string;
    reservedTicket?: {
        /**
         * チケット発行者
         */
        issuedBy?: ReservationFactory.IUnderName;
        /**
         * If the barcode image is hosted on your site, the value of the field is URL of the image, or a barcode or QR URI,
         * such as "barcode128:AB34" (ISO-15417 barcodes), "qrCode:AB34" (QR codes),
         * "aztecCode:AB34" (Aztec codes), "barcodeEAN:1234" (EAN codes) and "barcodeUPCA:1234" (UPCA codes).
         */
        ticketToken?: string;
        underName?: ReservationFactory.IUnderName;
    };
    underName?: ReservationFactory.IUnderName;
    additionalProperty?: IPropertyValue<string>[];
}

export interface IPotentialActionsParams {
    reserve?: {
        potentialActions?: {
            informReservation?: IInformParams[];
        };
    };
}

/**
 * 確定パラメーターインターフェース
 */
export interface IConfirmParams {
    id?: string;
    transactionNumber?: string;
    object?: {
        /**
         * 最終的な予約の属性を指定できます
         */
        reservations: IConfirmingReservation[];
    };
    /**
     * 予約確定後アクション
     */
    potentialActions?: IPotentialActionsParams;
}

// tslint:disable-next-line:no-empty-interface
export interface IResult {
}

/**
 * エラーインターフェース
 */
export type IError = any;

export interface IObjectWithoutDetail {
    acceptedOffer?: IAcceptedTicketOfferWithoutDetail[];
    broker?: ReservationFactory.IBroker;
    reservationFor?: { id: string };
    onReservationStatusChanged?: IOnReservationStatusChanged;
}

// IReservationForを最適化
export type IReservationFor = IEventReservationReservationFor;
export interface IEventReservationWithAnyReservationFor extends IEventReservation {
    reservationFor: any;
}
export interface ISubReservation extends IEventReservationWithAnyReservationFor {
    // 取引のsubReservationからはreservationForを削除する
    reservationFor: undefined;
}

/**
 * 取引対象物インターフェース
 */
export interface IObject extends IReservationPackage {
    acceptedOffer?: IAcceptedOffer4object[];
    // clientUser?: IClientUser;
    reservationFor?: IReservationFor;
    subReservation?: ISubReservation[];
    onReservationStatusChanged?: IOnReservationStatusChanged;
}

export interface IPotentialActions {
    reserve: ReserveActionFactory.IAttributes[];
}

export interface IAttributes extends TransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}

/**
 * 予約取引インターフェース
 */
export type ITransaction = IExtendId<IAttributes>;

export interface IObjectSearchConditions {
    reservationNumber?: {
        $eq?: string;
    };
    reservations?: {
        id?: {
            $in?: string[];
        };
        reservationNumber?: {
            $in?: string[];
        };
        reservationFor?: {
            id?: {
                $in?: string[];
            };
        };
    };
}

export interface ISearchConditions extends TransactionFactory.ISearchConditions<AssetTransactionType.Reserve> {
    object?: IObjectSearchConditions;
}
