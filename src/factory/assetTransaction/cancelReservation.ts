import { IAttributes as ICancelReservationActionAttributes } from '../action/cancel/reservation';
import * as TransactionFactory from '../assetTransaction';
import { ITransaction as IReserveTransaction } from '../assetTransaction/reserve';
import AssetTransactionType from '../assetTransactionType';
import { IExtendId } from '../autoGenerated';
import { IClientUser } from '../clientUser';
// import { IInformParams, IOnReservationStatusChanged } from '../project';
import { IReservation as IEventReservation } from '../reservation/event';

export type IStartParamsWithoutDetail =
    TransactionFactory.IStartParams<AssetTransactionType.CancelReservation, IAgent, undefined, IObjectWithoutDetail>;

/**
 * 取引開始パラメーターインターフェース
 */
export type IStartParams = TransactionFactory.IStartParams<AssetTransactionType.CancelReservation, IAgent, undefined, IObject>;

export interface IAgent {
    typeOf: string;
    id?: string;
    name: string;
    url?: string;
}

// tslint:disable-next-line:no-empty-interface
export interface IResult {
}

/**
 * エラーインターフェース
 */
export type IError = any;

export interface IObjectWithoutDetail {
    clientUser?: IClientUser;
    reservation?: {
        /**
         * 予約IDをキーに取消
         */
        id?: string | string[];
        /**
         * 予約番号をキーに取消
         */
        reservationNumber?: string;
    };
}

/**
 * 取引対象物インターフェース
 */
export interface IObject {
    clientUser?: IClientUser;
    transaction?: IReserveTransaction;
    reservations?: IEventReservation[];
}

export interface IPotentialActionsParams {
    cancelReservation?: {
        potentialActions?: {
        };
    };
}

/**
 * 取引確定パラメーターインターフェース
 */
export interface IConfirmParams {
    id: string;
    /**
     * 取引確定後アクション
     */
    potentialActions?: IPotentialActionsParams;
}

export interface IPotentialActions {
    cancelReservation: ICancelReservationActionAttributes[];
}

export type ITransaction = IExtendId<IAttributes>;

/**
 * 取引属性インターフェース
 */
export interface IAttributes
    extends TransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}

export interface ISearchConditions extends TransactionFactory.ISearchConditions<AssetTransactionType.CancelReservation> {
}
