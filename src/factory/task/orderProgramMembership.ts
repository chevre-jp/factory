import { ActionType } from '../actionType';
import { IExtendId } from '../autoGenerated';
import { OfferType } from '../offerType';
import { PermitType } from '../permit';
import { IAdditionalProperty, IIdentifier } from '../person';
import { PersonType } from '../personType';
import { ProductType } from '../product';
import { IProject } from '../project';
import * as TaskFactory from '../task';
import { TaskName } from '../taskName';
import { IPotentialActionsParams as IOrderPotentialActionsParams } from '../transaction/placeOrder';

// 最適化(2022-05-18~)
// export type IAgent = IParticipant;
export interface IAgent {
    typeOf: PersonType.Person;
    id: string;
    additionalProperty?: IAdditionalProperty;
    identifier: IIdentifier;
}
// 最適化(2022-05-18~)
// export type IAcceptedOffer = Omit<OrderFactory.IAcceptedOffer<IPermit>, 'priceSpecification'>;
export interface IAcceptedOffer {
    seller: { id: string };
    typeOf: OfferType;
    itemOffered: {
        typeOf: PermitType.Permit;
        name: string;
        issuedThrough: { typeOf: ProductType.MembershipService; id: string };
    };
    id: string;
    identifier: string;
}
export type IPotentialActions = IOrderPotentialActionsParams;
export interface IData {
    agent: IAgent;
    /**
     * 注文対象
     */
    object: IAcceptedOffer;
    /**
     * 注文取引確定後アクション
     */
    potentialActions?: IPotentialActions;
    project: IProject;
    typeOf: ActionType.OrderAction;
}
export interface IAttributes extends TaskFactory.IAttributes {
    name: TaskName.OrderProgramMembership;
    data: IData;
}
/**
 * メンバーシップ注文タスク
 */
export type ITask = IExtendId<IAttributes>;
