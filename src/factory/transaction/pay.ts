import * as GMO from '@motionpicture/gmo-service';

import { IAttributes as IPayActionAttributes, IPayPurpose, IPendingTransaction, IRecipient as IPayRecipient } from '../action/trade/pay';
import { IExtendId } from '../autoGenerated';
import { IMonetaryAmount } from '../monetaryAmount';
import { IUnauthorizedCardOfMember, IUncheckedCardRaw, IUncheckedCardTokenized } from '../paymentMethod/paymentCard/creditCard';
import { IMovieTicket } from '../paymentMethod/paymentCard/movieTicket';
import { IPropertyValue } from '../propertyValue';
import { PaymentServiceType } from '../service/paymentService';
import * as TransactionFactory from '../transaction';
import TransactionType from '../transactionType';

export type IAgent = any;

export type IRecipient = IPayRecipient;

export type IObjectWithoutDetail = IObject;

export type IStartParamsWithoutDetail = TransactionFactory.IStartParams<TransactionType.Pay, IAgent, IRecipient, IObject> & {
    purpose?: IPayPurpose;
};

export interface IStartParams extends TransactionFactory.IStartParams<TransactionType.Pay, IAgent, IRecipient, IObject> {
}

export interface IPotentialActionsParams {
    pay?: {
        purpose?: IPayPurpose;
    };
}

/**
 * 確定パラメーターインターフェース
 */
export interface IConfirmParams {
    id?: string;
    transactionNumber?: string;
    endDate?: Date;
    potentialActions?: IPotentialActionsParams;
}

export type IResult = any;

export type IError = any;

/**
 * クレジットカード決済承認アクションに必要なクレジットカード情報インターフェース
 */
export declare type ICreditCard = IUncheckedCardRaw | IUncheckedCardTokenized | IUnauthorizedCardOfMember;

export import IEntryTranArgs = GMO.factory.credit.IEntryTranArgs;
export import IEntryTranResult = GMO.factory.credit.IEntryTranResult;
export import IExecTranArgs = GMO.factory.credit.IExecTranArgs;
export import IExecTranResult = GMO.factory.credit.IExecTranResult;

export interface IPaymentMethod {
    /**
     * The identifier for the account the payment will be applied to.
     */
    accountId?: string;
    /**
     * 追加特性
     */
    additionalProperty?: IPropertyValue<string>[];
    /**
     * The amount of money.
     */
    amount: number;
    /**
     * 説明
     */
    description?: string;
    /**
     * 決済方法名称
     * 未指定であればデフォルト値が使用されます
     */
    name?: string;
    /**
     * 決済ID
     */
    paymentMethodId?: string;
    /**
     * The total amount due.
     */
    totalPaymentDue?: IMonetaryAmount;
    /**
     * 決済方法タイプ
     */
    typeOf: string;
    /**
     * ムビチケリスト
     */
    movieTickets?: IMovieTicket[];
    /**
     * 支払い方法
     */
    method?: string;
    /**
     * クレジットカード情報
     */
    creditCard?: ICreditCard;
}

/**
 * 取引対象物インターフェース
 */
export interface IObject {
    typeOf: PaymentServiceType;
    paymentMethod?: IPaymentMethod;
    pendingTransaction?: IPendingTransaction;
    entryTranArgs?: IEntryTranArgs;
    entryTranResult?: IEntryTranResult;
    execTranArgs?: IExecTranArgs;
    execTranResult?: IExecTranResult;
    payAction?: any;
}

export interface IPotentialActions {
    /**
     * 決済アクション
     */
    pay: IPayActionAttributes[];
}

export type ITransaction = IExtendId<IAttributes>;

/**
 * 転送取引インターフェース
 */
export interface IAttributes extends TransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}

export interface ISearchConditions extends TransactionFactory.ISearchConditions<TransactionType.Pay> {
}
