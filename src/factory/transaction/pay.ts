import { IAttributes as IMoneyTransferActionAttributes, IPendingTransaction } from '../action/transfer/moneyTransfer';
import { IExtendId } from '../autoGenerated';
import * as TransactionFactory from '../transaction';
import TransactionType from '../transactionType';

export type IAgent = any;

export type IRecipient = any;

export type IObjectWithoutDetail = any;

export type IStartParamsWithoutDetail
    = TransactionFactory.IStartParams<TransactionType.Pay, IAgent, undefined, IObjectWithoutDetail>;

export interface IStartParams extends TransactionFactory.IStartParams<TransactionType.Pay, IAgent, IRecipient, IObject> {
}

export type IResult = any;

export type IError = any;

export type IFromLocation = any;

/**
 * 取引対象物インターフェース
 */
export interface IObject {
    typeOf: string;
    paymentMethod?: any;
    fromLocation: IFromLocation;
    description?: string;
    pendingTransaction?: IPendingTransaction;
}

export interface IPotentialActions {
    /**
     * 通貨転送アクション
     */
    moneyTransfer: IMoneyTransferActionAttributes[];
}

export type ITransaction = IExtendId<IAttributes>;

/**
 * 転送取引インターフェース
 */
export interface IAttributes extends TransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}

export interface ISearchConditions extends TransactionFactory.ISearchConditions<TransactionType.Pay> {
}
