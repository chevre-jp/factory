import { IAttributes as IActionAttributes } from '../action';
import { ActionType } from '../actionType';
import { IAttributes as IScreeningEventAttributes } from '../event/screeningEvent';
import { IAttributes as IScreeningEventSeriesAttributes } from '../event/screeningEventSeries';

import { IExtendId } from '../autoGenerated';
import * as TaskFactory from '../task';
import { TaskName } from '../taskName';

export type IActionObject = IScreeningEventAttributes[] | IScreeningEventSeriesAttributes[];
export interface IActionInstrument {
    // createIfNotExist: boolean,
    createScreeningEventSeriesIfNotExistByWorkPerformed: boolean;
    /**
     * 全施設に施設コンテンツを作成するかどうか
     */
    createScreeningEventSeriesOnAllLocation?: boolean;
}
export type IData = IActionAttributes<ActionType.CreateAction, IActionObject, any> & {
    instrument: IActionInstrument;
};
export interface IAttributes extends TaskFactory.IAttributes {
    name: TaskName.CreateEvent;
    data: IData;
}
/**
 * イベント作成タスク
 */
export type ITask = IExtendId<IAttributes>;
