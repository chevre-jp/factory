import { IAttributes as IPayActionAttributes, IPurposeAsReturnAction } from '../action/trade/pay';
import { IOptimizedPayAction4order } from '../assetTransaction/pay';
import { IExtendId } from '../autoGenerated';
import * as TaskFactory from '../task';
import { TaskName } from '../taskName';

// export type IPayActionData = Pick<
//     IPayActionAttributes,
//     'agent' | 'instrument' | 'location' | 'object' | 'potentialActions' | 'project' | 'purpose' | 'recipient' | 'typeOf'
// >;
/**
 * 返品手数料決済の場合
 */
export interface IPayReturnFeeAction extends Pick<
    IPayActionAttributes,
    'object' | 'potentialActions' | 'purpose' | 'typeOf'
> {
    purpose: IPurposeAsReturnAction;
}
// const payAction: factory.action.trade.pay.IAttributes = {
//     project: refundAction.project,
//     typeOf: <factory.actionType.PayAction>factory.actionType.PayAction,
//     object: payObject,
//     agent: refundAction.project,
//     recipient: <any>refundAction.agent, // 返金者は販売者のはず
//     purpose: refundAction.purpose,
//     potentialActions: {
//         add2report: true,
//         informPayment: (Array.isArray(informPayment)) ? informPayment : []
//     }
// };
/**
 * 注文決済の場合
 */
export type IPayOrderAction = Pick<IOptimizedPayAction4order, 'object' | 'purpose'> & {
    typeOf?: never;
    potentialActions?: never;
};
// export type IData = IPayActionData | IOptimizedPayAction4order; // completely discontinue IPayActionData(2024-06-13~)
export type IData = IPayReturnFeeAction | IPayOrderAction;
export interface IAttributes extends TaskFactory.IAttributes {
    name: TaskName.Pay;
    data: IData;
}
/**
 * 決済タスク
 */
export type ITask = IExtendId<IAttributes>;
