import { IObjectWithoutDetail, IPurpose } from '../action/authorize/paymentMethod/any';
import { ILocation } from '../action/trade/pay';
import { IExtendId } from '../autoGenerated';
import { PaymentServiceType } from '../service/paymentService';
import * as TaskFactory from '../task';
import { TaskName } from '../taskName';

export interface IData {
    project: { id: string };
    agent: { id: string };
    object: IObjectWithoutDetail;
    purpose: IPurpose;
    paymentServiceType: PaymentServiceType;
    location?: ILocation;
    options: {
        /**
         * アクション失敗時に即時に決済取引を中止するかどうか
         */
        useCancelPayTransactionOnFailed: boolean;
        useCheckByIdentifierIfNotYet: boolean;
        useUnlockTransactionProcess: boolean;
    };
}
export interface IAttributes extends TaskFactory.IAttributes {
    name: TaskName.AuthorizePayment;
    data: IData;
}
/**
 * 決済承認タスク
 */
export type ITask = IExtendId<IAttributes>;
